Kernel command line: -q run priority-condvar
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  91,648,000 loops/s.
Boot complete.
Executing 'priority-condvar':
(priority-condvar) begin
(priority-condvar) Thread priority 23 starting.
(priority-condvar) Thread priority 22 starting.
(priority-condvar) Thread priority 21 starting.
(priority-condvar) Thread priority 30 starting.
(priority-condvar) Thread priority 29 starting.
(priority-condvar) Thread priority 28 starting.
(priority-condvar) Thread priority 27 starting.
(priority-condvar) Thread priority 26 starting.
(priority-condvar) Thread priority 25 starting.
(priority-condvar) Thread priority 24 starting.
(priority-condvar) Signaling...
(priority-condvar) Signaling...
(priority-condvar) Signaling...
(priority-condvar) Signaling...
(priority-condvar) Signaling...
(priority-cKernel PANIC at ../../lib/kernel/console.c:173 in putchar_have_lock(): assertion `console_locked_by_current_thread ()' failed.
Call stack: 0x800421380e 0x8004216b92 0x8004216b33 0x8004210d5a 0x80042169e2 0x8004210d11 0x8004216d09 0x8004219822 0x8004207619.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 40 ticks
Thread: 0 idle ticks, 40 kernel ticks, 0 user ticks
Console: 1